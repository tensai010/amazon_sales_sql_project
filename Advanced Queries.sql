-- Business Problems
-- Advanced Analytics
/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/

-- order_items - orders - products
-- sum qty*price per unit
-- group by prod id
-- top 10 products

SELECT * FROM order_items

-- creating new columns 

ALTER TABLE order_items
ADD COLUMN total_sales FLOAT;

-- updating price qty * price per unit

UPDATE order_items
SET total_sales = quantity * price_per_unit;
SELECT * FROM order_items;

SELECT 
	p.product_id,
	p.product_name,
	sum(oi.total_sales) as total_sales,
	count(o.order_id) as total_orders
FROM orders as o
JOIN order_items as oi
ON o.order_id = oi.order_id
JOIN products as p
on oi.product_id = p.product_id
GROUP BY p.product_id,
	p.product_name
ORDER BY sum(oi.total_sales) DESC
	LIMIT 10;

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

-- category_id , category_name , total_revenue
-- oi--products--category

SELECT 
	p.category_id ,
	c.category_name,
	sum(oi.total_sales) as total_revenue,
	sum(total_sales)/(SELECT sum(total_sales) FROM order_items) * 100 as percentage_contribution
	FROM order_items as oi
JOIN products as p
on oi.product_id = p.product_id
LEFT JOIN category as c
on c.category_id = p.category_id
GROUP BY 1,2
ORDER BY 3 DESC;


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/
--orders - order_items -- customers

SELECT 
	c.customer_id,
	concat
	(c.first_name, ' ',c.last_name) as full_name,
	sum(oi.total_sales) /count(o.order_id) as AOV ,
	count(o.order_id) as total_orders 
	FROM order_items as oi
JOIN orders as o
on o.order_id = oi.order_id
JOIN customers as c
on o.customer_id = c.customer_id
GROUP BY 1,2
HAVING count(o.order_id) >5;


/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/
-- last 1 year data
-- each month -- their sale and previous month sale
SELECT 
	month , 
	year , 
	total_sales as current_month_sale,
	lag(total_sales,1) over(ORDER BY year, month) as last_month_sale
	from
(
SELECT 
	EXTRACT(month from order_date ) as month,
	EXTRACT(year from order_date ) as year,
	ROUND(sum(oi.total_sales ::numeric),2) as total_sales 
	
FROM order_items as oi
JOIN orders as o
on o.order_id = oi.order_id
WHERE o.order_date >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY 1,2
ORDER BY 3 DESC) as t1;

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

-- approach 1

SELECT *
	FROM customers
	WHERE customer_id NOT IN (SELECT 
						DISTINCT customer_id
						FROM orders)

-- approach 2
select *
from customers as c
left join orders as o
on c.customer_id=o.customer_id
where o.customer_id is null;

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/
-- customers - order items - orders - category
-- Rank function 
-- sub query

 SELECT * FROM


(SELECT 
	c.state ,
	ct.category_name,
	sum(oi.total_sales) as total_sales,
	rank () over (PARTITION BY c.state ORDER BY sum(oi.total_sales) asc ) as ranks
	FROM customers as c
JOIN orders as o
on c.customer_id = o.customer_id
JOIN order_items as oi
on oi.order_id = o.order_id
JOIN products as p
on oi.product_id = p.product_id
JOIN category as ct
on p.category_id = ct.category_id
GROUP BY 1,2
ORDER BY 1,3 asc) as t1

WHERE ranks = 1;


/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/
-- customers - orders- order items
-- rank function

SELECT 
	c.customer_id ,
	concat(c.first_name,' ', c.last_name) as full_name,
	sum(oi.total_sales) as CLTV,
	DENSE_RANK () OVER (ORDER BY sum(oi.total_sales) DESC) AS customer_ranking
FROM customers as c
JOIN orders as o
on c.customer_id = o.customer_id
JOIN order_items as oi
on o.order_id = oi.order_id
GROUP BY 1,2
ORDER BY 3 DESC;

/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/


SELECT  
	i.inventory_id,
	p.product_name,
	i.stock as current_stock_left,
	i.last_stock_date,
	i.warehouse_id
	FROM inventory as i
JOIN products as p
on i.product_id = p.product_id
WHERE stock < 10;

/*
9. Shipping Delays
Identify orders where the shipping date is later than 5 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

-- cx -- o-- ship

SELECT 
	c.*,
	o.*,
	s.shipping_providers,
s.shipping_date - o.order_date as days_took_to_ship
FROM orders as o
JOIN
customers as c
ON c.customer_id = o.customer_id
JOIN 
shippings as s
ON o.order_id = s.order_id
WHERE s.shipping_date - o.order_date >= 5;



/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT 
	p.payment_status,
	COUNT(*) as total_cnt,
	COUNT(*)::numeric/(SELECT COUNT(*) FROM payments)::numeric * 100
FROM orders as o
JOIN
payments as p
ON o.order_id = p.order_id
GROUP BY 1;


/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/


WITH top_sellers
AS
(SELECT 
	s.seller_id,
	s.seller_name,
	SUM(oi.total_sales) as total_sales
FROM orders as o
JOIN
sellers as s
ON o.seller_id = s.seller_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 5
),

sellers_reports
AS
(SELECT 
	o.seller_id,
	ts.seller_name,
	o.order_status,
	COUNT(*) as total_orders
FROM orders as o
JOIN 
top_sellers as ts
ON ts.seller_id = o.seller_id
WHERE 
	o.order_status NOT IN ('Inprogress', 'Returned')
	
GROUP BY 1, 2, 3
)
SELECT 
	seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) as Completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) as Cancelled_orders,
	SUM(total_orders) as total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	SUM(total_orders)::numeric * 100 as successful_orders_percentage
	
FROM sellers_reports
GROUP BY 1, 2;


/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

-- o - oi - prod
-- group pid sum(total_sale - cogs * qty) as profit

SELECT 
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER( ORDER BY profit_margin DESC) as product_ranking
FROM
(SELECT 
	p.product_id,
	p.product_name,
	-- SUM(total_sale - (p.cogs * oi.quantity)) as profit,
	SUM(total_sales - (p.cogs * oi.quantity))/sum(total_sales) * 100 as profit_margin
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
GROUP BY 1, 2
) as t1;

/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/
-- orders- products-- product items
-- sum(returned items)

SELECT 
	p.product_id,
	p.product_name,
	count(*) as total_units_sold,
	sum(case when o.order_status = 'Returned' then 1 else 0 end) as total_returns,
	CEILING(sum(case when o.order_status = 'Returned' then 1 else 0 end):: numeric /count(*):: numeric * 100) as return_percentage
--	sum(case when o.order_status = 'Returned' then 1 else 0 end):: numeric /count(*):: numeric * 100 as return_percentage
FROM orders as o
JOIN order_items as oi
on o.order_id = oi.order_id
JOIN products as p
on oi.product_id = p.product_id
GROUP BY 1,2
ORDER BY 5 DESC;


/*
14. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/
-- sellers


WITH cte1 -- as these sellers has not done any sale in last 6 month
AS
(SELECT * FROM sellers
WHERE seller_id NOT IN (SELECT seller_id FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '6 month')
)
f
SELECT 
o.seller_id,
MAX(o.order_date) as last_sale_date,
MAX(oi.total_sales) as last_sale_amount
FROM orders as o
JOIN 
cte1
ON cte1.seller_id = o.seller_id
JOIN order_items as oi
ON o.order_id = oi.order_id
GROUP BY 1;


/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/
-- orders- customers - order items

SELECT 
	full_name as customers,
	total_orders,
	total_returns,
	case when total_returns > 5 then 'returning_customers' else 'new' end as customer_category
	FROM
(
SELECT 
	concat(c.first_name, ' ', c.last_name) as full_name,
	count(o.order_id) as total_orders,
	sum(case when o.order_status = 'Returned' then 1 else 0 end) as total_returns
	FROM orders as o
JOIN customers as c
on o.customer_id = c.customer_id
JOIN order_items as oi
on o.order_id = oi.order_id
GROUP BY 1
);


/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/
SELECT * FROM
(SELECT 
	c.state,
	concat(c.first_name, ' ', c.last_name) as full_name,
	count(o.order_id) as total_orders,
	sum(oi.total_sales) as total_sales,
	dense_rank() over(PARTITION BY c.state ORDER BY count(o.order_id) DESC ) as rank
FROM orders as o
JOIN order_items as oi
on o.order_id = oi.order_id
JOIN customers as c
on o.customer_id = c.customer_id
GROUP BY 1,2) as t1

WHERE rank <= 5;


/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/

-- oi - o - shipping
-- group by shipping provider id sum(total sale), total orders 

SELECT 
	s.shipping_providers,
	count(o.order_id) as order_handeled,
	sum(oi.total_sales) as total_sales,
	coalesce(avg(s.return_date - s.shipping_date),0 ) as average_days
	FROM
order_items as oi
join orders as o
on oi.order_id = o.order_id
join shippings as s
on o.order_id = s.order_id
group by 1;


/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result
Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

-- join o-oi
-- group by by 
	
with last_year_sale as
	
	(SELECT 
	p.product_id,
	p.product_name,
	sum(oi.total_sales) as revenue
FROM
order_items as oi
join orders as o
on oi.order_id = o.order_id
join products as p
on p.product_id = oi.product_id 
WHERE EXTRACT (YEAR FROM o.order_date) = 2022
GROUP BY 1,2),
	
current_year_sale as
	
(SELECT 
	p.product_id,
	p.product_name,
	sum(oi.total_sales) as revenue
FROM
order_items as oi
join orders as o
on oi.order_id = o.order_id
join products as p
on p.product_id = oi.product_id 
WHERE EXTRACT (YEAR FROM o.order_date) = 2023
GROUP BY 1,2)

SELECT 
	cy.product_id,
	cy.product_name,
	ly.revenue as last_year_revenue,
	cy.revenue as current_year_revenue,
	ly.revenue - cy.revenue as revenue_differernce ,  
	(cy.revenue - ly.revenue)::numeric	/ ly.revenue ::numeric * 100 as revenue_dec_ratio
FROM last_year_sale as ly
JOIN current_year_sale as cy
ON ly.product_id = cy.product_id
where ly.revenue > cy.revenue 
ORDER BY ly.revenue - cy.revenue DESC;


/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 
*/